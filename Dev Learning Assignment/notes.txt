----------
Dev Learning Assignment

The development part of DevOps is concerned with....
1. understanding how software is built using intentional planning, coding languages, collaboration and various methodologies
2. the automation of processes that reduce the time that it takes to develop new features that a customer can use with minimal errors.

DevOps engineers must be able to understand the code that developers have written and be able to write their own code to automate the set-up and maintenance of reliable infrastructure.

Goal: Learn Python
Source: Moshâ€™s Programming Tutorial -> https://www.youtube.com/watch?v=rfscVS0vtbw
Assignment: Watch for first 4:10 hrs -> https://www.youtube.com/watch?v=_uQrJ0TkZlc  (https://www.youtube.com/watch?v=_uQrJ0TkZlc&t=9662s)

Introduction
Python most popular programming language
Used for Automation, A.I., applications, and websites like Instagram.

Talk about core cocepts of python then build 3 python projects together.
Learn how to create website for imaginary website using a python framework named Jango.
Learn how to write a python program that predicts music people like based off their profile (like youtube recommends videos)

Teach us how to use python to automate boring repetitive task.

Write python program that process thousands of spread sheets in seconds

This course is for beginners

Plenty of exercises.
-----



----------
Installing Python

Installing Python -> python.org -> downloads tab -> download python latest version
downloads folder -> double click -> click ADD python to PATH for windows.

Install code editor.
PyCharm for writing python code. IDE. integrated development environment
Additonal features that make it easy to write code.
Community edition -> download folder -> double click -> do not import settings -> custoomize -> ive never used pyCharm -> 

-----



----------
Your First Python Program

In the future we will build applications that have GUIs

-----



----------
How Code gets Executed

Python code gets executed line by line from the top.
Python interpreter. A program that knows how to translate/interpret python code into instructions our computer can ujnderstand

print("*" * 10)

anywhere we have '' we are defining a string. * 10 means we are multiplying the string by 10
"*" * 10 is also an expression. Expression is a piece of code that produces a value. first will evaluate code between (). The expression will produce 10 * and will be printed on the terminal.

-----



----------
How long does it take to learn python and be job ready? No single answer but it depends on you and how you commit/effort. spend 2 hours a day consistently. after 3 months you can write basic python programs. You need to know what you want to use python for
Web applications, AI?, Desktop aplication?, machine learning? To be a web developer learn about HTML, CSS, Javascripot and Jango. Thats anohter 6 month. 
9-12 months to be job ready.
Make a commitment!
-----



----------
Variables
Most fundamental.
Use variables to store temporary data in computers memeory.
integer is number wihtout decimal point

float are numbers with decimal point

-----



----------
Getting Input
input and print () are functions built into python.
when you have () you are calling or executing that function
-----



----------
Type conversion
TypeError: unsupported operand type(s) for -: 'int' and 'str'
integer and string
we are subtracting a string from an integer. python doesnt know what to do with it.

Whatever we type in terminal is treated as a string.
2019 - '1982'
to fix this problem we nmeed to turn the user input into an integer.

Another built in function to help us convert values into different types
int()
float()
bool() convert string into boolean value

type()

-----



----------
Strings

talks about Strings
how to make multi line Strings
index of strings.
double quotes single quotes
talk about [] brackets with index in depth.

-----



----------
Formatted Strings
Formatted strings are particually useful in situations where we want to dynamically generate some text with your varaibles.
F-strings

msg = f"{first} [{last}] is a coder." is a formatted string.
the variables in {} will be replaced with the values.

easier to visualize

-----



----------
String Methods
In this part, shopwing us cool things you can do with python strings.
introducing len() function
len() can help us input when we recieve input from a user
good when input fields have a limit. we can enfoce a limit. 
general purpose function built into python.

when using methods like .upper , it does not modifiy the original string.

introduces the find method 
course.find("P")
This will return the index of the first occurance of the character

course.find("Beginners") #returns 11 because the word beginner starts at index 11
print("python" in course) #returns false or true

method of repalcing character.
print(course.replace("Dummies", "Absolute Beginners"))
this method is case sensitive.

-----



----------
Arithmetic Operations
Talks about different operators in python
+
-
*
/ - returns a float number division
// - returns a integer number division
% - returns remainder of a division.
** - power. 10 to the power

Talks about augmented assignment operator  to increment a number
augmented assignment operator lets us write the same code in a shorter form
x = 10
x = x + 3
x += 3
-----



----------
Operator Precedence
Basically PEMDAS
basic math concept.
parenthesis
exponents
multiplcation or division
addition or subtraction
order of operations

basic math concept not python.

-----



----------
Math Functions
Talks about built in functions for python
abs() absolute function. returns positive number
round() rounds the number

handful python function. if u write a program with complex mathematical calculations. you need to import math module
module in python is seperate file with reusable code.
use this module to reoganize our code in different files.

The math module has a bunch of reusuable functions that perfom mathematical calculations

python 3 math module on google.

-----



----------
If Statements
Extremly important. Allow us to build programs that can make decisions based on conditions. Conditional programming.
if
elif
else
if true:
    do something

-----



----------
Logical Operators
We use these operators in situations where we have multiple conditions
AND: both
OR: atleast one 
not

-----



----------
Comparison Operators
We use comparison operators in situations where we want to compare a variable with a value
>
>=
==
<
<=

!= not equal

-----



----------
Project: Weight Converter

An add on to 03-typeconverters
Uses if Statements
comparison operator

-----



----------
While Loops
We use while loops to execute a block of code multiple times.
usuful in building interactive programs and games

while condition:
    do something

while the condtion is true, the do something is executed  repeatively

It is important to icnrement your values inside the while loop or else the while loop will run forever

-----



----------
Guessing Game
Showing how to use while loop to build a guessing game.

Showing how to properly write code.
Introducing how to terminate a while loop early.
break
when python ses break it stops the while loop


while else - else gets executed if the while loop completes sucessfully without an immediate break. so basically if the user cant break the loop, the while loop will continue until the condition becomes false.
-----



----------
Car Game
We are going to build a game. a simulation for a car game. no GUI. building the engine for the game.
when u have duplicate in ur code. ur doing something wrong.

-----



----------
For Loops
we use for loops to iterate over items of a collection
like a string.  you can iterate over each character in a string.

Introduces range function

for item in range(10):                            10 is not included
When you call range function. range function creates an object. we can iterate over. in each iteration the object spits out a new number

range(5, 10) ----- # 5 6 7 8 9

range(5, 10, 2): the last numer is a step  # 5, 7, 9

-----



----------
Nested Loops
Adding one loop inside another loop
we can do amazing stuff
generate a list of coordinates.



-----



----------
Lists
taking a closer look at list
How to access invidual items in a list using brackets names[0]
negative indexs

how to access a range
print(names[2:]) # gives a list of items starting from index 2 

print(names[2:4]) #gives a list from the idnex 2 but does not include 4

print(names[:]) # return all item from beinging to end

Doesnt modify the original list. it simply returns a new list.

-----



----------
2D Lists
very powerful. have a lot of applications in data science and machine learning

-----



----------
List Methods
Are Operations that we can perform on a list.
numbers.append(20)  # add a new item to a list

numbers.insert(0, 10)  # add a new item to a at the start. first number is index position and second value is the object you want to add to the list. all the rest items are pushed to right

showing us different methods like append, insert, pop, index, sort, reverse.


These are all the operations that we can perform on list. We can add new items, remove exisiting items, check for the existiance of an item, sort out list and copy them.

-----



----------
Tuples
Similar to list. used to store a list of items. unlike list, we cannot modify them.
Tuples cannot bne mutated or changed.

numbers = (1, 2, 3)  # tuples
numbers.count #used to count the number of occurances of an item
numbers.index # to find index of the first occurance of that item.


We can only get information from a tuple. You cannot change it.
# Just like list you can access each item in the list

most of the time, tuples are usful if you want to create a list of items and want to make sure it does not get modified.

-----



----------
Unpacking
Unpkacing helps us write code easier. instead of making each variable in seperate lines, you can assign it to a tuple
coordinates = (1, 2, 3)
x, y, z = coordinates

When python interpreter sees x, y, z ... it will get the first item in the tuple and assign it to x, then the second to y, then last to z.
We are unpacking the tuple into 3 varaibles.

We can use this feature for list also.


-----



----------
Dictionaries
We use them to store information that come as key value pairs

Each key has to be unique 
Shows us how to access these values
its case sensitive.

we can use the .get method.
shows how to add new key value pairs

.get method is used incase user enteres character that is not part of dicotionary.
you pass the character as the key but if its not providied use , 

-----



----------
Emoji Converter :)
Show something really cool we can do with dictionaries. 
msg.split(" ") thius basically goes through a string and anywhere you find a space, it uses it as a boundary to seperate it into multiple words. its then stored into a list.

.get(key, ifnoitem with that key use the word as the default value)
The second value in the () is Optional. A value to return if the specified key does not exist.
Default value None

-----



----------
Functions
talks about how we write codes. as program goes we need better way to organize code. we need to break up the codes in smaller more maintable chunks called functions

a function is a container for a few lines of code that perform a certain task.
print()
input() are functions that know how to perform a task

def is a resevered key word in python. when intrepeter sees this they know we are defining a function.

whenever we call a function, the lines are then executed.

when python sees a function, it doesnt execute them until its called. once its called, it will jump back to that function and execute them.

order of code matters
always define function first, then call them.

-----



----------
Parameters
The difference between a print function and a greet_user() function?
The print function takes some information that we want to print. the greet_user() function does not take any information

Showing us how to pass information to our functions.

parameters are placeholders for reciving information.
We can reuse our function without havingto edit the original function to add a value. paramaters help us.

when a function passes a parameter, we are obligated to pass a value for that parameter.

Parameters vs arguments
Parameters are the holes/placeholders we define in a function for recieving information
arguments are the actual peices of information that we supply to the functions. 

We can also define multiple parameters

-----



----------
Keyword Arguments
positional arguments
when calling greet_user("Ricardo", "Deodutt"), the position matters.
the first argument is the first value, the second argument the the second value.

if you change the order then you will get different results.

in python we have keyword arguments. the position does not matter with those.
greet_user(last_name="Deodutt", first_name="Ricardo")
we dont have to worry about the matter.
most of the itme we use positional arguments
keyword arguments help us with the readability with the code.

sometimes you deal with fucntions that work with numerical values. some situations its not clear what the values represent.

keyword arguments shuld always come after positonal arguments. if passing both a keyword argument and positonal argument.

-----



----------
Return Statement


-----